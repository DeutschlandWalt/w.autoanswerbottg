import sys
import asyncio
from PyQt6.QtWidgets import QApplication, QWidget, QPushButton, QVBoxLayout, QLabel
from PyQt6.QtCore import QThread, pyqtSignal
from telethon import TelegramClient, events

# –î–∞–Ω–Ω—ã–µ –∏–∑ my.telegram.org
api_id = '25128851'  # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π API ID
api_hash = 'bd951dba7318a94095fd679878aba725'  # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π API Hash
phone_number = '+380501796597'  # –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –∫ Telegram

# –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç Telegram
client = TelegramClient('session_name', api_id, api_hash)

class BotThread(QThread):
    bot_started = pyqtSignal()
    bot_stopped = pyqtSignal()

    def run(self):
        asyncio.run(self.run_bot())

    async def run_bot(self):
        await client.start(phone=phone_number)
        self.bot_started.emit()
        try:
            await client.run_until_disconnected()
        finally:
            self.bot_stopped.emit()

class BotGUI(QWidget):
    def __init__(self):
        super().__init__()

        self.setWindowTitle("Bot Control Panel")
        self.setGeometry(100, 100, 300, 200)

        self.status_label = QLabel("–°—Ç–∞—Ç—É—Å: –û–∂–∏–¥–∞–Ω–∏–µ", self)

        self.start_button = QPushButton("Start", self)
        self.start_button.clicked.connect(self.start_bot)

        self.creator_button = QPushButton("Creator is here", self)
        self.creator_button.clicked.connect(self.creator_mode)

        self.stop_button = QPushButton("Stop", self)
        self.stop_button.clicked.connect(self.stop_bot)

        layout = QVBoxLayout()
        layout.addWidget(self.status_label)
        layout.addWidget(self.start_button)
        layout.addWidget(self.creator_button)
        layout.addWidget(self.stop_button)

        self.setLayout(layout)

        self.bot_running = False
        self.creator_here = False
        self.bot_thread = None

    def start_bot(self):
        if not self.bot_running:
            self.bot_running = True
            self.creator_here = False
            self.status_label.setText("–°—Ç–∞—Ç—É—Å: –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
            self.bot_thread = BotThread()
            self.bot_thread.bot_started.connect(lambda: self.status_label.setText("–°—Ç–∞—Ç—É—Å: –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç"))
            self.bot_thread.bot_stopped.connect(lambda: self.status_label.setText("–°—Ç–∞—Ç—É—Å: –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"))
            self.bot_thread.start()

    def creator_mode(self):
        if self.bot_running:
            self.creator_here = True
            self.status_label.setText("–°—Ç–∞—Ç—É—Å: –°–æ–∑–¥–∞—Ç–µ–ª—å –∑–¥–µ—Å—å, –±–æ—Ç –º–æ–ª—á–∏—Ç")

    def stop_bot(self):
        if self.bot_running:
            self.bot_running = False
            self.creator_here = False
            self.status_label.setText("–°—Ç–∞—Ç—É—Å: –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
            client.disconnect()
            self.bot_thread.quit()
            self.bot_thread.wait()
            self.status_label.setText("–°—Ç–∞—Ç—É—Å: –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

@client.on(events.NewMessage)
async def auto_reply(event):
    sender = await event.get_sender()
    message_text = event.message.message.lower()

    if event.is_private and not sender.bot:
        if window.bot_running and not window.creator_here:
            if "–ø—Ä–∏–≤–µ—Ç" in message_text:
                await event.reply("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–≤–µ—á–∞–µ—Ç, –ø–æ–∫–∞ –º–æ–π —Ö–æ–∑—è–∏–Ω –∑–∞–Ω—è—Ç. üòä")
            elif "–∫–∞–∫ –¥–µ–ª–∞" in message_text:
                await event.reply("–£ –º–µ–Ω—è –≤—Å—ë –æ—Ç–ª–∏—á–Ω–æ! –ê —É —Ç–µ–±—è?")
            elif "—á—Ç–æ –¥–µ–ª–∞–µ—à—å" in message_text:
                await event.reply("–û—Ç–≤–µ—á–∞—é –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è, –ø–æ–∫–∞ –º–æ–π —Ö–æ–∑—è–∏–Ω –∑–∞–Ω—è—Ç.")
            elif "—Å–ø–∞—Å–∏–±–æ" in message_text:
                await event.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞! –û–±—Ä–∞—â–∞–π—Å—è, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω—É–∂–Ω–æ.")
            else:
                await event.reply("–ò–∑–≤–∏–Ω–∏, —è –ø–æ–∫–∞ –Ω–µ –∑–Ω–∞—é, –∫–∞–∫ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —ç—Ç–æ. –ü–µ—Ä–µ–¥–∞–º —Ö–æ–∑—è–∏–Ω—É, –∫–æ–≥–¥–∞ –æ–Ω –æ—Å–≤–æ–±–æ–¥–∏—Ç—Å—è!")

if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = BotGUI()
    window.show()
    sys.exit(app.exec())